#!/usr/bin/env bash
## -- PATHMOD bash wrapper --
# A bash script that eases the way of modifying the bash PATH and PYTHONPATH environmental variables.

# Add Global variables
PATHMOD_PROGNAME="pathmod"
PATHMOD_CONFIG_FILE_NAME="${HOME}/.pathmod_cfg"
PATHMOD_VERSION="1.0.4"

# Unset previously set functions and aliases
unset -f _pathmod_load_config_vars 2> /dev/null
unset -f _pathmod_save_config_vars 2> /dev/null
unset -f _list_settings 2> /dev/null
unset -f _list_path 2> /dev/null
unset -f _pathmod_usage 2> /dev/null
unset -f _pathmod_add_path 2> /dev/null
unset -f _pathmod_remove_path 2> /dev/null
unset -f _pathmod_move_path 2> /dev/null
unset -f _pathmod_path_exists 2> /dev/null
unset -f _pathmod_cmdline 2> /dev/null
unset -f _pathmod_wrapper 2> /dev/null
unset -f _pathmod_main 2> /dev/null

# Bash echo colours
ORANGE='\033[0;33m'
RED='\033[0;31m'
NC='\033[0m' # No Colour

_pathmod_load_config_vars() {
	# Loads saved variables

	if [[ -a "$PATHMOD_CONFIG_FILE_NAME" ]]; then

		# Read variables from file
		while IFS="=" read -r key val; do
			case "$key" in
				'#'*) 
					;; # Skip comments
				'path_export'|'path_display'|'path_guard')
					eval "$key=\"$val\""
					;;
			esac
		done < "$PATHMOD_CONFIG_FILE_NAME"

		# Parse variables to make sure they are alright
		case "$path_export" in
			"true"|"True"|"TRUE"|"false"|"False"|"FALSE")
				;;	
			*)
				# Value was not valid set to default
				path_export=true
				;;
		esac
		case "$path_display" in
			"true"|"True"|"TRUE"|"false"|"False"|"FALSE")
				;;	
			*)
				# Value was not valid set to default
				path_export=false
				;;
		esac
		case "$path_guard" in
			"true"|"True"|"TRUE"|"false"|"False"|"FALSE")
				;;	
			*)
				# Value was not valid set to default
				path_guard=false
				;;
		esac
	else

		# Create file
		{ 
		cat > "$PATHMOD_CONFIG_FILE_NAME" <<- EOL
		# Pathnmod settings
		path_export=true
		path_display=false
		path_guard=false
		EOL
		} || {
			printf "%s:${ORANGE}warning:${NC} Configuration file could not be loaded. Default values were used instead. %s\n" "$PATHMOD_PROGNAME"		
		}

		# Use defaults
		path_export=true
		path_display=false
		path_guard=false
	fi

}

_pathmod_save_config_vars() {
	# Save the pathmod configuration values

	{
	cat >"$PATHMOD_CONFIG_FILE_NAME" <<- EOL
	# Pathnmod settings
	path_export=$path_export
	path_display=$path_display
	path_guard=$path_guard
	EOL
	} || {
		printf "%s:${ORANGE}warning:${NC} Pathmod configuration values could not be saved. %s\n" "$PATHMOD_PROGNAME"		
	}
}

_list_settings() {
	# Lists current settings and paths

	cat <<- EOF
	current settings and values: $PATHMOD_PROGNAME (v$PATHMOD_VERSION)

	SETTINGS:
	   - Path export: $path_export
	   - Path display: $path_display
	   - Path guard: $path_guard
	$(_list_path)
	EOF
}

_list_path() {
	# Lists the current PATH and PYTHONPATH

	# Split PATH and PYTHONPATH into array
	local defaultIFS="$IFS"; IFS=$' \t\n'; local path_tmp=(${PATH//:/ }); IFS="$defaultIFS"
	local defaultIFS="$IFS"; IFS=$' \t\n'; local pythonpath_tmp=(${PYTHONPATH//:/ }); IFS="$defaultIFS"
	
	# Prepend array row number
	for ((ii=0;ii<${#path_tmp[@]};ii++)); do     path_tmp[ii]=" - [$ii] ${path_tmp[ii]}"; done
	for ((ii=0;ii<${#pythonpath_tmp[@]};ii++)); do     pythonpath_tmp[ii]=" - [$ii] ${pythonpath_tmp[ii]}"; done
	
	# Print PATH and PYTHONPATH
	cat <<- EOF

	PATH:
	$(printf "%s\n" "${path_tmp[@]}")

	PYTHONPATH:
	$(printf "%s\n" "${pythonpath_tmp[@]}")
	EOF
}

_pathmod_usage() {
	#  Prints usage information
	cat <<- EOF
	usage: $PATHMOD_PROGNAME options

	Program enables you to easily check, add, move and remove paths from the PATH or PYTHONPATH
	environmental variables.

	OPTIONS:
	   -a  --add                 add path(s) to the PATH or PYTHONPATH
	   -i  --index               index where to add the path(s) (OPTIONAL: 0=start, -1=end, defaults to -1)
	   -m  --move                move a path to a given index (Adds path if not yet present.)
	   -r  --remove              remove path(s) from the PATH or PYTHONPATH
	   -c  --check               check if path exists in the PATH or PYTHONPATH
	   -e  --expand-path         outputs the absolute path of rel_path relative to relative_to or the current directory
	   -h  --help                show this help
	   -v, --version             show pathmod version
	   -p  --pythonpath          modify PYTHONPATH instead of PATH
	   -s  --settings            display pathmod settings and the current PATH and PYTHONPATH
	   -sd --set-path-display    display PATH and PYTHONPATH after each command (OPTIONAL, defaults to false)
	   -se --set-export          export path after it is set (OPTIONAL, defaults to true)
	   -sg --set-path-guard      check whether a path is valid before adding it (OPTIONAL, defaults to false)

	Examples:
	   Add path to PATH variable:
	   $PATHMOD_PROGNAME --add <PATH>
	   
	   Add path to PATH at an index:
	   $PATHMOD_PROGNAME --add <PATH> --index <INDEX>

	   Remove path from PATH variable:
	   $PATHMOD_PROGNAME --remove <PATH>
	   $PATHMOD_PROGNAME --remove <INDEX>

	   Check if path exists in PATH variable:
	   $PATHMOD_PROGNAME --exists <PATH>

	   Move path to a given index:
	   $PATHMOD_PROGNAME --move <PATH> --index <INDEX>
	   $PATHMOD_PROGNAME --move <OLD_INDEX> --index <NEW_INDEX>

	   Add path from PYTHONPATH variable:
	   $PATHMOD_PROGNAME --pythonpath --add <PATH>

	NOTE:
	   Each option only accepts one argument at the same time. To add, remove or check multiple
	   paths please use the colon (Example: $PATHMOD_PROGNAME --<OPTION> <PATH1>:<PATH2>) or
	   space separator (Example: $PATHMOD_PROGNAME --<OPTION> "<PATH1> <PATH2>").
	EOF
}

_pathmod_add_path() {
	# Adds paths from the PATH or PYTHONPATH variable

	# Create local arrays
	local added=()
	local not_added=()
	local not_valid=()
	local add_by_index=false

	# Check if add array was given using the space separator
	read -a opt_arg_array <<< "$@" 	# Convert input to array
	if [[ "${#opt_arg_array[@]}" -eq 1 ]]; then # If input argument has length 1 (path:path:path)

		# Split given paths by deliminator
		local defaultIFS="$IFS"; IFS=$' \t\n'; local add_paths_array=(${@//:/ }); IFS="$defaultIFS"
	else
		local add_paths_array=("${opt_arg_array[@]}")
	fi

	# Split PATH or PYTHONPATH into array and get path length
	if [[ "$python_path" == false ]]; then # Add to PATH
		local defaultIFS="$IFS"; IFS=$' \t\n'; local path_array=(${PATH//:/ }); IFS="$defaultIFS"
	else
		local defaultIFS="$IFS"; IFS=$' \t\n'; local path_array=(${PYTHONPATH//:/ }); IFS="$defaultIFS"
	fi
	
	# Adjust index if it is out of range
	local arr_len="${#path_array[@]}"
	if [[ "$path_index" -lt -1 ]]; then
		path_index=0
	elif [[ "$path_index" -gt "$arr_len" ]]; then
		path_index=-1
	fi

	# Loop through paths and add them if do not yet exist
	if [[ "$python_path" == false ]]; then # Add to PATH
		local path_type="PATH" # Set PATH type

		# Append path if index == -1
		if [[ "$path_index" == -1 ]]; then

			# Loop through paths the user wants to add 
			for path in "${add_paths_array[@]}"; do

				# Check if path exists on PATH
				if [[ ":$PATH:" != *":$path:"* ]]; then

					# Check if path is valid
					if [[ ! -e "$path" && "$path_guard" == true ]]; then # Only if path guards are enabled

						# The directory was not added because it was not valid
						not_valid+=(" - ${path}")
					else

						# Append to PATH variable
						PATH="${PATH:+${PATH}:}$path" 

						# The directory is added on the path
						added+=(" - ${path}")
					fi
				else

					# The directory was already on the path and thus not added
					not_added+=(" - ${path}")				
				fi
			done

		# Prepend path or add at index
		else

			# Loop through paths the user wants to add
			# NOTE: Done in opposite direction because it is prepended
			for (( ii=${#add_paths_array[@]}-1 ; ii>=0 ; ii-- )) ; do
				local path="${add_paths_array[ii]}"				
				
				# Check if path exists on PATH
				if [[ ":$PATH:" != *":$path:"* ]]; then
					
					# Check if path is valid
					if [[ ! -e "$path" && "$path_guard" == true ]]; then # Only if path guards are enabled
					
						# The directory was not added because it was not valid
						not_valid=(" - ${path}" "${not_valid[@]}")
					else

						# Prepend path
						if [[ "$path_index" == 0 ]]; then 
		
							# Prepend to PATH variable
							PATH="$path${PATH:+:${PATH}}"
						else # Add path at index
			
							# Add path to PATH variable at index
							path_array=("${path_array[@]:0:$path_index}" "$path" "${path_array[@]:$path_index:${arr_len[@]}}")
							add_by_index=true
						fi

						# The directory is added on the path
						added=(" - ${path}" "${added[@]}") 
					fi
				else

					# The directory was already on the path and thus not added
					not_added=(" - ${path}" "${not_added[@]}")				
				fi
			done
		fi

		# Convert path array back to delimited string
		if [[ "$add_by_index" == true ]]; then
			PATH=$(IFS=$':'; echo "${path_array[*]}") # Converting bash array back into a delimited string
		fi
	else # Add to PYTHONPATH
		local path_type="PYTHONPATH" # Set PYTHONPATH type

		# Append path if index == -1
		if [[ "$path_index" == -1 ]]; then

			# Loop through paths the user wants to add 
			for path in "${add_paths_array[@]}"; do

				# Check if path exists on PYTHONPATH
				if [[ ":$PYTHONPATH:" != *":$path:"* ]]; then

					# Check if path is valid
					if [[ ! -e "$path" && "$path_guard" == true ]]; then # Only if path guards are enabled

						# The directory was not added because it was not valid
						not_valid+=(" - ${path}")
					else

						# Append to PYTHONPATH variable
						PYTHONPATH="${PYTHONPATH:+${PYTHONPATH}:}$path" 

						# The directory is added on the path
						added+=(" - ${path}")
					fi
				else

					# The directory was already on the path and thus not added
					not_added+=(" - ${path}")				
				fi
			done

		# Prepend path or add at index
		else

			# Loop through paths the user wants to add
			# NOTE: Done in opposite direction because it is prepended
			for (( ii=${#add_paths_array[@]}-1 ; ii>=0 ; ii-- )) ; do
				local path="${add_paths_array[ii]}"				
				
				# Check if path exists on PYTHONPATH
				if [[ ":$PYTHONPATH:" != *":$path:"* ]]; then
					
					# Check if path is valid
					if [[ ! -e "$path" && "$path_guard" == true ]]; then # Only if path guards are enabled
					
						# The directory was not added because it was not valid
						not_valid=(" - ${path}" "${not_valid[@]}")
					else

						# Prepend path
						if [[ "$path_index" == 0 ]]; then 
		
							# Prepend to PYTHONPATH variable
							PYTHONPATH="$path${PYTHONPATH:+:${PYTHONPATH}}"
						else # Add path at index
			
							# Add path to PYTHONPATH variable at index
							path_array=("${path_array[@]:0:$path_index}" "$path" "${path_array[@]:$path_index:${arr_len[@]}}")
							add_by_index=true
						fi

						# The directory is added on the path
						added=(" - ${path}" "${added[@]}") 
					fi
				else

					# The directory was already on the path and thus not added
					not_added=(" - ${path}" "${not_added[@]}")				
				fi
			done
		fi

		# Convert path array back to deliminator string
		if [[ "$add_by_index" == true ]]; then
			PYTHONPATH=$(IFS=$':'; echo "${path_array[*]}") # Converting bash array back into a delimited string
		fi
	fi
	
	# Print added paths message
	if ! [[ "${#added[@]}" -eq 0 ]]; then 
		if [[ "$path_index" -eq 0 ]]; then
			if [[ "$move_on" == false ]]; then # If moved
				printf "Paths that were successfully prepended to the $path_type variable:\n"
				printf '%s\n' "${added[@]}" | sort -u
			else
				printf "Paths that were successfully moved to the beginning of the $path_type variable:\n"
				printf '%s\n' "${added[@]}" | sort -u
			fi
		elif [[ "$path_index" -eq -1 ]]; then
			if [[ "$move_on" == false ]]; then # If moved
				printf "Paths that were successfully appended to the $path_type variable:\n"
				printf '%s\n' "${added[@]}" | sort -u
			else
				printf "Paths that were successfully moved to the end of the $path_type variable:\n"
				printf '%s\n' "${added[@]}" | sort -u
			fi
		else
			if [[ "$move_on" == false ]]; then # If moved
				printf "Paths that were successfully added to index $path_index of the $path_type variable:\n"
				printf '%s\n' "${added[@]}" | sort -u
			else
				printf "Paths that were successfully moved to index $path_index of the $path_type variable:\n"
				printf '%s\n' "${added[@]}" | sort -u
			fi
		fi
	fi

	# Print not added paths message
	if ! [[ "${#not_added[@]}" -eq 0 ]]; then 
		printf "Paths that were already found on the $path_type variable and were thus not added:\n"
		printf '%s\n' "${not_added[@]}" | sort -u
	fi

	# Print invalid paths message
	if ! [[ "${#not_valid[@]}" -eq 0 ]]; then
		printf "Paths that were not valid and thus were not added to the path:\n"
		printf '%s\n' "${not_valid[@]}" | sort -u
	fi

	# Check if paths were removed and send return value
	if [[ "${#added[@]}" -eq 0 ]]; then
		return 1 # No paths added return value
	else
		return 0 # Paths were added return value
	fi
}	

_pathmod_remove_path() {
	# Removes paths from the PATH or PYTHONPATH variable

	# Create local arrays
	local removed_by_index=false
	local removed=()
	local not_removed=()
	local not_valid=()
	local remove_paths_array=()
	local remove_paths_array_index=()

	# Check if argument is integer
	read -a opt_arg_array <<< "$@" 	# Convert input to array
	if [[ "${#opt_arg_array[@]}" -eq 1 ]]; then # If input argument has length 1

		# Split PATH or PYTHONPATH into array and get path length
		if [[ "$python_path" == false ]]; then # Add to PATH
			local defaultIFS="$IFS"; IFS=$' \t\n'; local path_array=(${PATH//:/ }); IFS="$defaultIFS"
		else
			local defaultIFS="$IFS"; IFS=$' \t\n'; local path_array=(${PYTHONPATH//:/ }); IFS="$defaultIFS"
		fi
		local arr_len="${#path_array[@]}"

		# Check if index is number
		local re='^-?[0-9]+$'
		if [[ "$opt_arg_array" =~ $re ]]; then
			local index="${opt_arg_array}"

			# Check if path index was within range
			if [[ "$index" -lt -1 || "$index" -gt "$arr_len" ]]; then
				
				# Add invalid array to the not valid array
				not_valid+=(" - [${index}]")
			else

				# Add path to path the remove array
				remove_paths_array+=(${path_array[$index]})
				remove_paths_array_index+=($index)
			fi

		else # If path is not a number

			# Split given paths by deliminator (Space or :)
			local defaultIFS="$IFS"; IFS=$' \t\n'; local opt_arg_array=(${@//:/ }); IFS="$defaultIFS"

			# Replace numbers by path
			for item in "${opt_arg_array[@]}"; do

				# Check if index is number
				if [[ "$item" =~ $re ]]; then
					local index="${item}"
					
					# Check if index is within range
					if [[ "$index" -lt -1 || "$index" -gt "$arr_len" ]]; then

						# Add invalid array to the not valid array
						not_valid+=(" - [${index}]")
					else
						# Add path to the path remove array
						remove_paths_array+=("${path_array[index]}")
						remove_paths_array_index+=("${index}")
					fi
				else

					# If no number add item as path
					remove_paths_array+=("$item")
					remove_paths_array_index+=(false) # Set to false since item is not an index
				fi
			done
		fi
	else

		# Split PATH or PYTHONPATH into array and get path length
		if [[ "$python_path" == false ]]; then # Add to PATH
			local defaultIFS="$IFS"; IFS=$' \t\n'; local path_array=(${PATH//:/ }); IFS="$defaultIFS"
		else
			local defaultIFS="$IFS"; IFS=$' \t\n'; local path_array=(${PYTHONPATH//:/ }); IFS="$defaultIFS"
		fi
		local arr_len="${#path_array[@]}"

		# Loop though indexes and add paths at index to remove path array
		for item in "${opt_arg_array[@]}"; do

			# Check if index is number
			local re='^-?[0-9]+$'
			if [[ "$item" =~ $re ]]; then
				if [[ "$item" -lt -1 || "$item" -gt "$arr_len" ]]; then

					# Add invalid array to the not valid array
					not_valid+=(" - [${item}]")
				else
					# Add path to the path remove array
					remove_paths_array+=("${path_array[item]}")
					remove_paths_array_index+=("${item}")
				fi
			else

				# If no number add item as path
				remove_paths_array+=("$item")
				remove_paths_array_index+=(false) # Set to false since item is not an index
			fi
		done
	fi

	## Remove paths from PATH or PYTHONPATH
	# Loop through paths and remove them if they exist
	# Delete path by parts so we can never accidentally remove sub paths
	if [[ "$python_path" == false ]]; then # Remove from PATH
		local path_type="PATH"

		# Loop through remove paths
		for ii in "${!remove_paths_array[@]}"; do
			local path="${remove_paths_array[$ii]}"
			if [[ ":$PATH:" == *:"$path":* ]]  ; then

				# Remove all occurrences from PATH variable
				while [[ ":$PATH:" == *:"$path":* ]] ; do 

					# Remove path from PATH variable
					if [[ "${arr_len}" -eq 1 ]]; then # If Path length is 1
						PATH=${PATH//"${path}"/} # delete instance
					else
						PATH=${PATH//":${path}:"/":"} # delete any instances in the middle
						PATH=${PATH/#"${path}:"/} # delete any instance at the beginning
						PATH=${PATH/%":${path}"/} # delete any instance in the at the end
					fi
				done
				
				# The directory was on the path and is thus removed
				if [[ "${remove_paths_array_index[ii]}" == false ]]; then
					removed+=(" - ${path}")
				else
					removed+=(" - [${remove_paths_array_index[ii]}] ${path}")
				fi
			else
				# The directory was not on the path so can could not be removed
				not_removed+=(" - ${path}")
			fi
		done
	else # Remove from PYTHONPATH
		local path_type="PYTHONPATH"

		# Loop through remove paths
		for ii in "${!remove_paths_array[@]}"; do
			local path="${remove_paths_array[$ii]}"
			if [[ ":$PYTHONPATH:" == *:"$path":* ]]  ; then

				# Remove all occurrences from PATH variable
				while [[ ":$PYTHONPATH:" == *:"$path":* ]] ; do 

					# Remove path from PATH variable
					if [[ "${arr_len}" -eq 1 ]]; then # If Path length is 1
						PYTHONPATH=${PYTHONPATH//"${path}"/} # delete instance
					else
						PYTHONPATH=${PYTHONPATH//":${path}:"/":"} # delete any instances in the middle
						PYTHONPATH=${PYTHONPATH/#"${path}:"/} # delete any instance at the beginning
						PYTHONPATH=${PYTHONPATH/%":${path}"/} # delete any instance in the at the end
					fi
				done
				
				# The directory was on the path and is thus removed
				if [[ "${remove_paths_array_index[ii]}" == false ]]; then
					removed+=(" - ${path}")
				else
					removed+=(" - [${remove_paths_array_index[ii]}] ${path}")
				fi
			else
				# The directory was not on the path so can could not be removed
				not_removed+=(" - ${path}")
			fi
		done
	fi

	# Print result messages
	if [[ "$move_on" == false ]]; then

		# Print removed paths message
		if ! [[ ${#removed[@]} -eq 0 ]]; then
			printf "Paths that were successfully removed from the $path_type variable:\n"
			printf '%s\n' "${removed[@]}" | sort -u
		fi

		# Print not removed paths message
		if ! [[ "${#not_removed[@]}" -eq 0 ]]; then
			printf "Paths that were not removed on the $path_type variable and could not be removed:\n"
			printf '%s\n' "${not_removed[@]}" | sort -u
		fi

		# Print invalid paths message
		if ! [[ "${#not_valid[@]}" -eq 0 ]]; then
			printf "Paths or indexes that were not valid and thus were not removed from the path:\n"
			printf '%s\n' "${not_valid[@]}" | sort -u
		fi
	fi

	# Check if paths were removed and send return value
	if [[ "${#removed[@]}" -eq 0 ]]; then
		return 1 # No paths added return value
	else
		return 0 # Paths were added return value
	fi
}

_pathmod_move_path() {
	# Moves paths to another place on the PATH or PYTHONPATH

	# Create paths variable
	local paths=""

	# Split PATH or PYTHONPATH into array and get path length
	if [[ "$python_path" == false ]]; then # Add to PATH
		local defaultIFS="$IFS"; IFS=$' \t\n'; local path_array=(${PATH//:/ }); IFS="$defaultIFS"
	else
		local defaultIFS="$IFS"; IFS=$' \t\n'; local path_array=(${PYTHONPATH//:/ }); IFS="$defaultIFS"
	fi
	local arr_len="${#path_array[@]}"

	# Check if path was specified as index or as paths
	read -a opt_arg_array <<< "$@" 
	if [[ "${#opt_arg_array[@]}" -eq 1 ]]; then

		# If specified as index
		local re='^-?[0-9]+$'
		if [[ "$opt_arg_array" =~ $re ]]; then # If input a number
			local index="$opt_arg_array"

			# Check if index is within range
			if [[ "$index" -lt -1 || "$index" -gt "$arr_len" ]]; then

				# Print error
				printf "$PATHMOD_PROGNAME:${RED}error:${NC} No path was found at index ${index}.\n" >&2
				return 1
			else 

				# Find path at index and add to paths variable
				paths="${path_array[index]}"				
			fi
		else # If input is not a number
			
			# Split given paths by deliminator (Space or :)
			local defaultIFS="$IFS"; IFS=$' \t\n'; local opt_arg_array=(${@//:/ }); IFS="$defaultIFS"

			# Check if the string contained numbers and replace them by the path at that index
			for item in "${opt_arg_array[@]}"; do

				# Check if index is number
				local re='^-?[0-9]+$'
				if [[ "$item" =~ $re ]]; then
					local index="$item"

					# Check if index is within range
					if [[ "$index" -lt -1 || "$index" -gt "$arr_len" ]]; then

						# Print warning
						printf "$PATHMOD_PROGNAME:${ORANGE}warning:${NC} Index ${index} was ignored as no path was found at this index.\n" >&2
					else 

						# Find path at index and add to paths variable
						paths="${paths}${path_array[index]} "						
					fi
				else

					# Add path to paths variable as it was not an index
					paths="${paths} ${item}"
				fi
			done
		fi
	else # Multiple paths specified
		
		# Loop through paths
		for item in "${opt_arg_array[@]}"; do

			# Check if path contains index and replace it with the right path
			local re='^-?[0-9]+$'
			if [[ "$item" =~ $re ]]; then
				local index="$item"

				# Check if index is within range
				if [[ "$index" -lt -1 || "$index" -gt "$arr_len" ]]; then

					# Print warning
					printf "$PATHMOD_PROGNAME:${ORANGE}warning:${NC} Index ${index} was ignored as no path was found at this index.\n" >&2

				else 

					# Find path at index
					paths="${paths} ${path_array[index]}"
				fi
			else

				# Add path to paths variable
				paths="${paths} ${item}"
			fi
		done
	fi

	# Check if path was empty
	if [[ "${#paths}" -eq 0 ]]; then
		printf "$PATHMOD_PROGNAME:${ORANGE}warning:${NC} No paths were moved as no valid paths or indexes were specified.\n" >&2
		return 1
	fi

	# Moves a path to a given index
	move_on=true # Tell the functions used below the call to them was made from the _pathmod_move_path function

	# Remove paths from PATH or PYTHONPATH
	_pathmod_remove_path "$paths"
	remove_retval="$?"
	
	# Add path at a given index
	_pathmod_add_path "$paths"
	move_on=false # Disable move_bool again
	add_retval="$?"


	# Check if move was successful
	if [[ "$remove_retval" -eq 1 || "$add_retval" -eq 1 ]]; then
		return 1 # No paths moved return value
	else
		return 0 # Paths were moved return value
	fi
}

_pathmod_path_exists() {
	# Checks if a path exists on the PATH or PYTHONPATH

	# Create local arrays
	local found=()
	local not_found=()

	# Split path by deliminator
	local defaultIFS="$IFS"; IFS=$' \t\n'; local exist_paths_array=(${@//:/ }); IFS="$defaultIFS"

	# Loop through paths and check if they exist in PATH or PYTHONPATH
	if [[ "$python_path" == false ]]; then # Check PATH
		local path_type="PATH"
		for item in "${exist_paths_array[@]}"; do
			if [[ ":$PATH:" == *:"$item":* ]] ; then

				# O.K., the directory is on the path
				found+=(" - ${item}")
			else

				# The directory is not on the path
				not_found+=(" - ${item}")
			fi
		done
	else # Check PYTHONPATH
		local path_type="PYTHONPATH"
		for item in "${exist_paths_array[@]}"; do
			if [[ ":$PYTHONPATH:" == *:"$item":* ]] ; then

				# O.K., the directory is on the path
				found+=(" - ${item}")
			else

				# The directory is not on the path
				not_found+=(" - ${item}")
			fi
		done
	fi

	# Print result
	if ! [[ "${#found[@]}" -eq 0 ]]; then
		printf "Paths that were found on the $path_type variable:\n"
		printf '%s\n' "${found[@]}" | sort -u
	fi
	if ! [[ "${#not_found[@]}" -eq 0 ]]; then
		printf "Paths that were not found on the $path_type variable:\n"
		printf '%s\n' "${not_found[@]}" | sort -u
	fi

	# Set return value
	return 0
}


_pathmod_getarg_validate() {
	# Makes sure the GETARG is not an OPTION.
	# This prohibits taking other options as arguments.
	local args="$@"

	# Check if GETARG is OPTION
	case "$OPTARG" in
        -a|-i|-m|-r|-c|-h|-v|-p|-s|-sd|-se|-sg)

			# Display warning message and return result
			printf "$PATHMOD_PROGNAME:${RED}error:${NC} option argument can not be another option -- %s\n" "$OPTARG"
			_pathmod_usage
			return 1 # Is option
            ;;
        *)
          	return 0 # Not option
          	;;
        esac
}

_pathmod_cmdline() {
	# Command line parser
	# got this idea from here:
	# http://kirk.webfinish.com/2009/10/bash-shell-script-to-use-getopts-with-gnu-style-long-positional-parameters/
	OPTIND=1 # Reset OPTIND (Needed since the script is sourced)
	local arg="$@"
	local args=() # Make args variable local (needed since script is sourced)
	local path_index=-1
	local opt_a=false
	local opt_i=false
	local opt_m=false
	local opt_r=false
	local move_on=false
	local python_path=false
	local move_index_warning=false
	local nothing_changed=false

	# Translate long options to short options
	for arg
	do
		local delim=""
		case "$arg" in
			# Translate --gnu-long-options to -g (short options)
			--add)         	     args="${args}-a ";;
			--index)             args="${args}-i ";;
			--move)              args="${args}-m ";;
			--remove)            args="${args}-r ";;
			--check)             args="${args}-c ";;
			--help)              args="${args}-h ";;
			----pythonpath)      args="${args}-p ";;
			--settings)		     args="${args}-s ";;
			-se)			     args="${args}-z ";;
			--set-export)        args="${args}-z ";;
			-sd)  				 args="${args}-d ";;
			--set-path-display)  args="${args}-d ";;
			#pass through anything else
			*) 
				# Escape options that do not begin with -
				[[ "${arg:0:1}" == "-"  ]] || delim="\""

				# Pass through anything else
				args="${args}${delim}${arg}${delim} "
				;;
		esac
	done

	# Print help if no option was given
	if [[ "$#" -eq 0 ]]
  	then
  	  	_pathmod_usage
		return 0
	fi

	# Reset the positional parameters to the short options
	eval set -- "$args"

	# -- First argument parser --
	# Check dependent and setting related options.
	while getopts ":a:c:d:e:g:i:m:r:z:hpsv" OPTION
	do
		case "$OPTION" in
		d)

			# Check if GETARG is option
			_pathmod_getarg_validate "$OPTARG"
			if [[ "$?" -eq 1 ]]; then return 1; fi

			# Check input value and change export settings
			case "$OPTARG" in
				"true"|"True"|"TRUE"|1)

					# Set path export variable to true
					if [[ "$path_display" == true ]]; then
						printf "%s: path_display boolean already set to true.\n" "$PATHMOD_PROGNAME"
					else
						printf "%s: path_display boolean set to true.\n" "$PATHMOD_PROGNAME"
						path_display=true
					fi
					;;	
				"false"|"False"|"FALSE"|0)

					# Set path export variable to false					
					if [[ "$path_display" == false ]]; then
						printf "%s: path_display boolean already set to false.\n" "$PATHMOD_PROGNAME"
					else
						printf "%s: path_display boolean set to false.\n" "$PATHMOD_PROGNAME"
						path_display=false
					fi
					;;
				*)
					printf "%s: path_display boolean kept on %s since %s in not a valid value.\n" "$PATHMOD_PROGNAME" "$path_display" "$OPTARG"
					;;
			esac

			# Save values to config file
			_pathmod_save_config_vars
			;;
		e)	
			# Get absolute path and check if it exists
			abs_path=$(cd $(dirname "$OPTARG") 2>/dev/null && pwd -P)/$(basename "$OPTARG")
			if [[ -e "$abs_path" ]]; then
				echo "$abs_path"
			else
				printf "File \"%s\" does not exist in path \"%s\".\n" "$OPTARG" "$PWD"
			fi
			return 0
			;;
		g)

			# Check if GETARG is option
			_pathmod_getarg_validate "$OPTARG"
			if [[ "$?" -eq 1 ]]; then return 1; fi

			# Check input value and change export settings
			case "$OPTARG" in
				"true"|"True"|"TRUE"|1)

					# Set path export variable to true
					if [[ "$path_guard" == true ]]; then
						printf "%s: path_guard boolean already set to true.\n" "$PATHMOD_PROGNAME"
					else
						printf "%s: path_guard boolean set to true.\n" "$PATHMOD_PROGNAME"
						path_guard=true
					fi
					;;	
				"false"|"False"|"FALSE"|0)

					# Set path export variable to false					
					if [[ "$path_guard" == false ]]; then
						printf "%s: path_guard boolean already set to false.\n" "$PATHMOD_PROGNAME"
					else
						printf "%s: path_guard boolean set to false.\n" "$PATHMOD_PROGNAME"
						path_guard=false
					fi
					;;
				*)
					printf "%s: path_display boolean kept on %s since %s in not a valid value.\n" "$PATHMOD_PROGNAME" "$path_guard" "$OPTARG"
					;;
			esac

			# Save values to config file
			_pathmod_save_config_vars
			;;
		h)
			# Print help
		 	_pathmod_usage
			return 0
			;;
		i)

			# Check if GETARG is option
			_pathmod_getarg_validate "$OPTARG"
			if [[ "$?" -eq 1 ]]; then return 1; fi

			# Check if array is index or number
			read -a path_index_tmp <<< "$OPTARG"
			local re='^-?[0-9]+$'

			# Validate if index was a number or a list of numbers
			if [[ "${#path_index_tmp[@]}" -eq 1 ]]; then

				# Split list based on : deliminator
				local defaultIFS="$IFS"; IFS=$' \t\n'; local path_index_tmp=(${path_index_tmp//:/ }); IFS="$defaultIFS"			

				# Check if a list of indexes was given
				if [[ "${#path_index_tmp[@]}" -eq 1 ]]; then
					for index in "${path_index_tmp[@]}"; do 

						# Check if index is number and not smaller than -1
						if ! [[ "$index" =~ $re ]] ; then
							printf "$PATHMOD_PROGNAME:${RED}error:${NC} Index is not a number.\n" >&2
							_pathmod_usage
							return 1
						elif [[ "$index" -lt -1 ]]; then
							printf "$PATHMOD_PROGNAME:${RED}error:${NC} Index or index list can't take a negative value other than -1.\n" >&2
							_pathmod_usage
							return 1
						fi
					done
				else
					# Print error message as a list of indexes is not yet supported
					printf "$PATHMOD_PROGNAME:${RED}error:${NC} Sorry a list of indexes is not yet supported. Please supply a single index.\n" >&2
					_pathmod_usage
					return 1
				fi
			else
				
				# Print error message as a list of indexes is not yet supported
				printf "$PATHMOD_PROGNAME:${RED}error:${NC} Sorry a list of indexes is not yet supported. Please supply a single index.\n" >&2
				_pathmod_usage
				return 1
			fi

			# set index
		 	path_index="$path_index_tmp"
			opt_i=true
			;;
		s)
			# List settings
			_list_settings
			return 0
			;;
		v)	
			# Print version
			echo "v$PATHMOD_VERSION"
			return 0
			;;
		z)
			# Check if GETARG is option
			_pathmod_getarg_validate "$OPTARG"
			if [[ "$?" -eq 1 ]]; then return 1; fi

			# Check input value and change export settings
			case "$OPTARG" in
				"true"|"True"|"TRUE"|1)

					# Set path export variable to true
					if [[ "$path_export" == true ]]; then
						printf "%s: path_export boolean already set to true.\n" "$PATHMOD_PROGNAME"
					else
						printf "%s: path_export boolean set to true.\n" "$PATHMOD_PROGNAME"
						path_export=true
					fi
					;;	
				"false"|"False"|"FALSE"|0)

					# Set path export variable to false					
					if [[ "$path_export" == false ]]; then
						printf "%s: path_export boolean already set to false.\n" "$PATHMOD_PROGNAME"
					else
						printf "%s: path_export boolean set to false.\n" "$PATHMOD_PROGNAME"
						path_export=false
					fi
					;;
				*)
					printf "%s: path_export boolean kept on %s since %s in not a valid value.\n" "$PATHMOD_PROGNAME" "$path_export" "$OPTARG"
					;;
			esac

			# Save values to config file
			_pathmod_save_config_vars
			;;
		a)

			# Check if GETARG is option
			_pathmod_getarg_validate "$OPTARG"
			if [[ "$?" -eq 1 ]]; then return 1; fi

			# Set option boolean
			opt_a=true
			;; # Main code in next getopts switch
		c)

			# Check if GETARG is option
			_pathmod_getarg_validate "$OPTARG"
			if [[ "$?" -eq 1 ]]; then return 1; fi

			# Set option boolean
			opt_c=true
			;; # Pass to next getopt switch
		m)

			# Check if GETARG is option
			_pathmod_getarg_validate "$OPTARG"
			if [[ "$?" -eq 1 ]]; then return 1; fi

			# Set option boolean
			opt_m=true
			;; # Main code in next getopts switch
		p)
			python_path=true
			;;
		r)	

			# Check if GETARG is option
			_pathmod_getarg_validate "$OPTARG"
			if [[ "$?" -eq 1 ]]; then return 1; fi

			# Set option boolean
			opt_r=true
			;; # Main code in next getopts switch
		:)	
			# Throw no argument given error
		 	printf "$PATHMOD_PROGNAME:${RED}error:${NC} option requires an argument -- %s\n" "$OPTARG"
			_pathmod_usage
			return 1
			;;
		?)
			printf "$PATHMOD_PROGNAME:${RED}error:${NC} invalid option was specified -%s\n" "$OPTARG"
			_pathmod_usage
			return 1
			;;
		esac
	done


	# Print result header
	if [[ "$opt_a" == true || "$opt_m" == true || "$opt_c" == true || "$opt_r" == true ]]; then
		printf "Results:%s\n\n" "$PATHMOD_PROGNAME"
	fi

	# -- First argument parser --
	# Check independent options and perform path modification actions.
	unset OPTIND # Needed since we source the script
	while getopts ":a:c:d:e:g:i:m:r:z:hpsv" OPTION
	do 
		case "$OPTION" in
		a)
		 	# Add path
			_pathmod_add_path "$OPTARG"

			# Check if add was successful
			if [[ "$?" -eq 1 ]]; then nothing_changed=true; fi
			break
			;;
		m)
			# Check if index was specified if not display warning
			if [[ "$opt_i" == false ]]; then
				printf "%s:${ORANGE}warning:${NC} Path could not be moved since no index was supplied.\n" "$PATHMOD_PROGNAME"
				move_index_warning=true
			else
				# Move path
				_pathmod_move_path "$OPTARG"
			fi

			# Check if add was successful
			if [[ "$?" -eq 1 ]]; then nothing_changed=true; fi
			break
			;;
		r)
			# Remove path
			_pathmod_remove_path "$OPTARG"
			
			# Check if add was successful
			if [[ "$?" -eq 1 ]]; then nothing_changed=true; fi
			break
			;;
		c)
			# Check if path exists
		 	_pathmod_path_exists "$OPTARG"

			# Check if add was successful
			if [[ "$?" -eq 1 ]]; then nothing_changed=true; fi
			break
			;;
		d)
			;; # Already handled by first getopts switch
		e)
			;; # Already handled by first getopts switch
		g)
			;; # Already handled by first getopts switch
		h)
			;; # Already handled by first getopts switch
		i)
			;; # Already handled by first getopts switch
		p)
			;; # Already handled by first getopts switch
		s)
			;; # Already handled by first getopts switch
		v)
			;; # Already handled by first getopts switch
		z)
			;; # Already handled by first getopts switch
		:)	
			# Catch options that can have an empty argument if an index is specified
		 	printf "$PATHMOD_PROGNAME:${RED}error:${NC} option requires an argument -- %s\n" "$OPTARG"
			_pathmod_usage
			return 1
			;;
		?)
		 	printf "$PATHMOD_PROGNAME:${RED}error:${NC} invalid option was specified -%s\n" "$OPTARG"
			_pathmod_usage
			return 1
			;;
		esac
	done

	# Export path such that it gets passed on to child processes
	if [[ "$path_export" == true && \
		  "$nothing_changed" == false && \
		  (( "$opt_a" == true || "$opt_r" == true ) || ( "$opt_m" == true && "$move_index_warning" == false )) \
	]]; then
		if [[ "$python_path" == false ]]; then
			printf "PATH variable exported.\n"
			export PATH
		else
			printf "PYTHONPATH variable exported.\n"
			export PYTHONPATH
		fi
	fi

	# Display PATH and PYTHONPATH if specified
	if [[ "$path_display" == true && \
	      (( "$opt_a" == true || "$opt_r" == true ) || ( "$opt_m" == true && "$move_index_warning" == false )) \
	]]; then
		_list_path		
	fi

	# Display warning if index was specified but no path was added or moved
	if [[ "$opt_i" == true && ! ( ! "$opt_a" == false || ! "$opt_m" == false ) ]]; then
		printf "%s:${ORANGE}warning:${NC} index (-i) option was ignored since no path was found to be added or moved.\n" "$PATHMOD_PROGNAME"
	fi

	# Reset warning booleans
	move_index_warning=false
}

_pathmod_wrapper() {
	# Pathmod alias function
	_pathmod_cmdline "$@"
}

_pathmod_main(){
	# Main function

	# Load configuration values
	_pathmod_load_config_vars

	# Create pathmod alias
	alias pathmod='_pathmod_wrapper'
}

# Execute _pathmod_main function
_pathmod_main "$@"
unset -f _pathmod_main 2> /dev/null